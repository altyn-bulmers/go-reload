package main

import (
	"os/exec"
	"testing"
)

func TestTableDoop(t *testing.T) {
	var tests = []struct {
		input1   string
		input2   string
		input3   string
		expected string
	}{
		{"1", "+", "1", "2\n"},
		{"861", "+", "870", "1731\n"},
		{"861", "-", "870", "-9\n"},
		{"861", "*", "870", "749070\n"},
		{"861", "%", "870", "861\n"},
		{"hello", "+", "1", "0\n"},
		{"1", "p", "1", "0\n"},
		{"1", "/", "0", "No division by 0\n"},
		{"1", "%", "0", "No modulo by 0\n"},
		{"1", "*", "1", "1\n"},
		{"9223372036854775807", "+", "1", "0\n"},
		{"9223372036854775809", "-", "3", "0\n"},
		{"9223372036854775807", "*", "3", "0\n"},
		{"9223372036854775807", "+", "1", "0\n"},
		{"9223372036854775805", "+", "2", "9223372036854775807\n"},
		{"9223372036854775807", "*", "1", "9223372036854775807\n"},
		{"9223372036854775808", "*", "1", "0\n"},
		{"-9223372036854775808", "*", "1", "-9223372036854775808\n"},
		{"-9223372036854775808", "*", "-1", "0\n"},
		{"2321412412342", "*", "23232311", "0\n"},
		{"-1", "*", "-9223372036854775808", "0\n"},
		{"-1", "*", "-9223372036854775807", "9223372036854775807\n"},
		{"2021412111111", "*", "1023231", "2068371535864219641\n"},
		{"123", "+", "+", "0\n"},
		{"+", "+", "+", "0\n"},
		{"+", "+", "13", "0\n"},
	}
	for i, test := range tests {
		filename := "main.go"
		command := exec.Command("go", "run", filename, test.input1, test.input2, test.input3)
		bytes, _ := command.CombinedOutput()
		out := string(bytes)
		if out != test.expected {
			t.Error("test failed:", "expected:", test.expected, "received:", out, "number:", i+1)
		}
	}
}